-- FUNCTIONS --


  gc_adapter_initialize(gc_adapter_t** adapter)

      Initializes the USB interface and creates a new adapter instance.
      
      adapter - The new adapter instance.
      
      Returns - If initialization of the adapter instance succeeded.

      Defined in libgcadapter.h


  gc_adapter_update(gc_adapter_t* adapter)

      Updates the status of the adapter (adapter->open).
      This function is responsible for claiming the USB interface to the adapter and for checking if the adapter is still open.
      This function should not be called too often, as it enumerates the entire USB device list every time it is called.
      Around once a second would be ideal.
      Please note that this does not update adapter->pad, as that is done when the adapter is polled for input.
      
      adapter - The adapter which should be updated.
      
      Returns - Nothing.
      
      Defined in libgcadapter.h
      

  gc_pad_poll(gc_adapter_t* adapter, int port, gc_pad_state_t* state)
  
      Polls the state of the controller located at port.
      This function updates the types of controllers at adapter->pad. This is not done in gc_adapter_update due to technical limitations.
      This function will always empty out the state, even if the adapter is not open or no controller is plugged into the specified port.
      This function should ideally be called on a separate thread to maximize performance.
      
      adapter - The adapter to poll from.
      port - The port to poll from. This should be in the range of 0 to GC_ADAPTER_PORTS-1.
      
      Returns - Nothing.
      
      Defined in libgcadapter.h
      

  gc_pad_set_rumble(gc_adapter_t* adapter, int port, uint8_t rumble)
  
      Set the rumble value of the pad located at port.
      
      adapter - The adapter to set the rumble value on.
      port - The port to set the rumble value on. This should be in the range of 0 to GC_ADAPTER_PORTS-1.
      
      Returns - Nothing.
      
      Defined in libgcadapter.h


  gc_adapter_free(gc_adapter_t* adapter)
  
      Frees all resources used by the adapter and closes all open USB connections.
      This should only be called if the call to gc_adapter_initialize succeeded.
      
      adapter - The adapter to free.
      
      Returns - Nothing.
      
      Defined in libgcadapter.h


-- MACROS --


  GC_PAD_BTN_DOWN(state, btn)
  
      Expands to a statement which determines if the specified btn is held down in state.
      
      Defined in gctypes.h


  GC_PAD_RESET_STATE(state)
  
      Expands to a statement which resets a state to the default values.
      The default values for a state are:
          state.buttons = 0
          state.stick.x = GC_PAD_STICK_CENTER
          state.stick.y = GC_PAD_STICK_CENTER
          state.c_stick.x = GC_PAD_STICK_CENTER
          state.c_stick.y = GC_PAD_STICK_CENTER
          state.triggers.x = 0
          state.triggers.y = 0
          
     Defined in gctypes.h


  GC_PAD_STATES_EQUAL(st1, st2)
  
      Expands to a statement which determines if st1 is equal to st2.
      
      Defined in gctypes.h


-- TYPES --


  gc_pad_btn_t
  
      Definition of a button on a GameCube controller.
      Used as a bitfield when determining what buttons are held down in a gc_pad_state_t.
      
      GC_PAD_BTN_DPAD_LEFT - The left d-pad button.
      GC_PAD_BTN_DPAD_RIGHT - The right d-pad button.
      GC_PAD_BTN_DPAD_UP - The topmost d-pad button.
      GC_PAD_BTN_DPAD_DOWN - The bottommost d-pad button.
      GC_PAD_BTN_Z - The Z trigger button.
      GC_PAD_BTN_L - The L trigger button, which is held down if the trigger axis goes over ~200.
      GC_PAD_BTN_R - The R trigger button, which is held down if the trigger axis goes over ~200.
      GC_PAD_BTN_A - The A button.
      GC_PAD_BTN_B - The B button.
      GC_PAD_BTN_X - The X button.
      GC_PAD_BTN_Y - The Y button.
      GC_PAD_BTN_START - The start button.
      
      Defined in gctypes.h
      
      
  gc_pad_axis_t
  
      Definition of an axis on a GameCube controller.
      Contains two byte values, x and y, which can be used to determine the rotation of the axis.
      The trigger axis maps L to x and R to y, and goes from 0 to 255, which determines how held down the trigger is.
      Stick axises map the horizontal value to x and the vertical value to y, and goes 
      from GC_PAD_STICK_CENTER to 0 and 255, which determines in what direction and how much the stick is held.
      
      Defined in gctypes.h
      
      
  gc_pad_state_t
  
      Contains the full state of a GameCube controller at a point in time.
      
      buttons - A bitfield indicating which buttons are held down on the controller
                (should be accessed via GC_PAD_BTN_DOWN(state, btn)).
      stick - The stick axis.
      c_stick - The c-stick axis.
      triggers - The L and R trigger.
      
      Defined in gctypes.h


  gc_pad_t
  
      Determines the type of a controller in an adapter port.
      Do note that only wired controllers can be used with gc_pad_set_rumble(adapter, port, rumble).
      
      GC_PAD_NONE - No controller is plugged into this port.
      GC_PAD_WIRED - A wired controller is plugged into this port.
      GC_PAD_WIRELESS - A wireless controller is plugged into this port.
      
      Defined in libgcadapter.h
      
      
  gc_adapter_t
  
      An instance of a Wii U GameCube Adapter.
      This structure contains many values, but the only ones which should be directly accessed
      by external applications are adapter->open, adapter->pad and adapter->rumble. The other
      values are used for keeping track of open USB connections and other state.
      
      open - If this adapter instance has an open USB connection to an adapter.
      pad - An array which states what type of controller is plugged into the ports on the adapter.
            This should be accessed in the range of 0 to GC_ADAPTER_PORTS-1.
      rumble - Determines the current rumbling of a controller in a port. 
               This should not be modified directly, but should be set via gc_pad_set_rumble(adapter, port, rumble). 
               This should be accessed in the range of 0 to GC_ADAPTER_PORTS-1.
      
      Defined in libgcadapter.h


